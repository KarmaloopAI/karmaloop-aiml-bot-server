using KarmaloopAIMLBot;
using KarmaloopAIMLBotServer.Helpers;
using KarmaloopAIMLBotServer.Skills;
using Newtonsoft.Json;
using System;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace KarmaloopAIMLBotServer
{
    /// <summary>
    /// Handles each incomming client request separately.
    /// </summary>
	public class KarmaloopClient
    {
        #region Properties
        /// <summary>
        /// Socket of the client
        /// </summary>
        TcpClient clientSocket { get; set; }

        /// <summary>
        /// Index of the client.
        /// </summary>
        string clNo { get; set; }

        #endregion

        #region Methods
        /// <summary>
        /// Starts an individual client connection
        /// </summary>
        /// <param name="inClientSocket"></param>
        /// <param name="clientNo"></param>
        public void StartClient(TcpClient inClientSocket, string clientNo)
        {
            this.clientSocket = inClientSocket;
            this.clNo = clientNo;
            Thread ctThread = new Thread(HandleChat);
            ctThread.Start();
        }

        /// <summary>
        /// Generates a response for client input sentence.
        /// </summary>
        /// <param name="dataFromClient"></param>
        /// <returns>Response generated by AIML Bot engine</returns>
        protected string ProcessRequestResponse(string dataFromClient)
        {
            BotUser user = Server.DefaultUser;
            dynamic js = JsonConvert.DeserializeObject<dynamic>(dataFromClient);
            string userid = string.Empty, question = string.Empty;

            if(js != null && js.userid != null)
            {
                userid = js.userid.ToString();
                if (Server.Users.ContainsKey(userid))
                    user = Server.Users[userid];
                else
                {
                    user = new BotUser(Guid.Parse(userid), Server.ActiveBot);
                    Server.Users[userid] = user;
                }

                question = js.question.ToString();
            }

            WebhooksHelper.PreResponseHook(question, user);
            Result res = Server.ActiveBot.Chat(new Request(question, user, Server.ActiveBot));
            string responseStatement = SkillsRepository.Instance.ProcessSkills(res.Output);
            WebhooksHelper.PostResponseHook(question, responseStatement, user);


            return responseStatement;
        }

        /// <summary>
        /// This method handles the chat and runs on a separate thread for each user/client.
        /// </summary>
        private void HandleChat()
        {
            int requestCount = 0;
            byte[] bytesFrom = new byte[10025];
            string dataFromClient = null;
            Byte[] sendBytes = null;
            string serverResponse = null;
            string rCount = null;

            try
            {
                requestCount = requestCount + 1;
                NetworkStream networkStream = clientSocket.GetStream();
                networkStream.Read(bytesFrom, 0, 10000);
                dataFromClient = System.Text.Encoding.ASCII.GetString(bytesFrom);
                dataFromClient = dataFromClient.Substring(0, dataFromClient.IndexOf("$"));
                Console.WriteLine(" >> " + "From client-" + clNo + dataFromClient);

                rCount = Convert.ToString(requestCount);
                serverResponse = ProcessRequestResponse(dataFromClient);
                sendBytes = Encoding.ASCII.GetBytes(serverResponse);
                networkStream.Write(sendBytes, 0, sendBytes.Length);
                networkStream.Flush();
                Console.WriteLine(" >> " + serverResponse);
                clientSocket.Close();
            }
            catch (Exception ex)
            {
                Console.WriteLine(" >> " + ex.ToString());
            }
        }
        #endregion
    }
}
